"use strict";let e=!1;var t={logLevel:()=>e?1:0,setTrace:t=>e=t,regex:{attrs:/rbs-(.*?)="(.*?)"/g,whitespace:/\s/g},attrs:{watch:"rbs-watch",method:"rbs-method",ref:"rbs-ref"}};const{attrs:n}=t;let o=1;var r={dom:{recordState(e){const t=document.activeElement,o=t.getAttribute(n.ref);return e.contains(t)&&o?{ref:o,style:t.getAttribute("style"),scrollTop:t.scrollTop,scrollLeft:t.scrollLeft,selectionStart:t.selectionStart}:null},restoreState(e,t){if(!t)return;const n=this.findRef(e,t.ref);if(n){if(n.focus(),t.selectionStart){const e="TEXTAREA"===n.tagName?t.selectionStart:t.selectionStart+1;n.setSelectionRange(e,e)}n.scrollTop=t.scrollTop,n.scrollLeft=t.scrollLeft,t.style&&n.setAttribute("style",t.style)}},findRef:(e,t)=>e.getAttribute(n.ref)===t?e:e.querySelector(`[${n.ref}="${t}"]`),findRefs(e){const{ref:t}=n;return Array.from(e.querySelectorAll(`[${t}]`)).reduce((e,n)=>{const o=n.getAttribute(t),r=e[o];return e[o]=r?[r].concat(n):n,e},{})},findMethod:e=>document.querySelector(`[${n.method}="${e}"]`),findWatcher:e=>document.querySelector(`[${n.watch}="${e}"]`),propStr:e=>Object.entries(e).map(([e,t])=>"number"==typeof t?`${e}=${t}`:`${e}="${t}"`).join(" "),wrapWatcher(e,t,o){const{tag:r,...a}={tag:"span",...o};return`<${r} ${this.propStr(a)} ${t.length?"":"style='display:none;'"} ${n.watch}="${e}">${t}</${r}>`},getShadow(e){const t=document.createElement("div");return t.innerHTML=e,t}},debounce(e,t=0,n=!1){let o=null;return function(){const r=n&&!o,a=()=>e.apply(this,arguments);clearTimeout(o),o=setTimeout(a,t),r&&a()}},nextTick:()=>new Promise(e=>{setTimeout(e,0)}),intersects:(e,t)=>Object.keys(t).filter(t=>t in e),registerHelpers(e,t){Object.entries(t).forEach(([t,n])=>e.registerHelper(t,n))},registerPartials(e,t,n){Object.entries(n).forEach(([n,o])=>{e.registerPartial(n,o.template),["methods","partials","data"].forEach(r=>{if(!(r in o))return;const a=this.intersects(t[r],o[r]);a.length&&e.log(2,`ReBars: partial ${n} has conflicting ${r} keys`,a)}),o.data&&Object.assign(t.data,o.data),o.methods&&Object.assign(t.methods,o.methods),o.helpers&&this.registerHelpers(e,o.helpers)})},bind:(e,t,...n)=>Object.keys(e).reduce((o,r)=>(o[r]=e[r].bind(t,...n),o),{}),shouldRender:(e,t)=>t.some(t=>{if(e===t||".*"===t)return!0;const n=e.split(".");return t.split(".").every((e,t)=>e===n[t]||"*"===e)}),randomId:()=>`rbs${o++}`},a={create(e,t,n=!1){let o=[];const a=r.debounce(()=>{t(o),o=[]}),i=e=>{o.includes(e)||o.push(e),a(o)};return function e(t,o=[]){return new Proxy(t,{get:function(t,r){const a=Reflect.get(...arguments);return a&&"object"==typeof a&&["Array","Object"].includes(a.constructor.name)?e(a,o.concat(r)):(n&&i(o.concat(r).join(".")),a)},set:function(e,t,n){const r=Reflect.set(...arguments),a=o.concat(t).join(".");return i(a),r},deleteProperty:function(e,t){const n=Reflect.deleteProperty(...arguments),r=o.concat(t).join(".");return i(r),n}})}(e)}};const{attrs:i}=t;var s={register({instance:e,template:n,store:o,scope:s}){e.registerHelper("ref",t=>new e.SafeString(`${i.ref}="${t}"`)),e.registerHelper("buildPath",(function(...e){return e.pop(),Array.from(e).join(".")})),e.registerHelper("on",(function(...t){const{hash:n,loc:o}=t.pop(),a=r.randomId(),d=this;return Object.entries(n).forEach(([o,i])=>{r.nextTick().then((function(){const l=r.dom.findMethod(a);l&&(i in s.methods||e.log(3,`ReBars: "${i}" is not a method.`,n,l),l.addEventListener(o,e=>{const n={event:e,$app:s.$app,$refs:r.dom.findRefs.bind(null,s.$app),$nextTick:r.nextTick,rootData:s.data};n.methods=r.bind(s.methods,d,n),n.methods[i](...t)}))}))}),new e.SafeString(`${i.method}="${a}"`)})),e.registerHelper("watch",(function(...n){const{fn:i,hash:s}=n.pop(),d=r.randomId();if(!n.length){const e=a.create(this,e=>{o.renders[d].path=e},!0);i(e)}return o.renders[d]={path:n.filter(e=>"string"==typeof e),render:()=>i(this)},r.nextTick().then(()=>{const a=r.dom.findWatcher(d);a&&(n.forEach(t=>{"string"!=typeof t&&e.log(3,"ReBars: can only watch Strings",n,a)}),e.log(t.logLevel(),"ReBars: watching",o.renders[d].path,a))}),r.dom.wrapWatcher(d,i(this),s)}))}};const{attrs:d,regex:l}=t;function c(e,t){const n=e.replace(l.attrs,""),o=t.replace(l.attrs,"");return r.dom.getShadow(n).isEqualNode(r.dom.getShadow(o))}var h={canPatch:e=>e.children.length&&e.children.length>1&&Array.from(e.children).every(e=>e.getAttribute(d.ref)),hasChanged:(e,t)=>!c(e.innerHTML,t),compare({$target:e,html:n,instance:o}){const a=r.dom.getShadow(n),i=Array.from(a.children),s=t.logLevel();Array.from(e.children).forEach(e=>{const t=r.dom.findRef(a,e.getAttribute(d.ref));t?c(t.innerHTML,e.innerHTML)||(o.log(s,"ReBars: updating",e,t),e.replaceWith(t.cloneNode(!0))):(o.log(s,"ReBars: removing",e),e.remove())}),i.forEach((t,n)=>{r.dom.findRef(e,t.getAttribute(d.ref))||(o.log(s,"ReBars: adding",t),e.append(t.cloneNode(!0)))}),i.forEach((t,n)=>{const o=e.children[n];o.getAttribute(d.ref)!==t.getAttribute(d.ref)&&o.replaceWith(t.cloneNode(!0))})}},p={paths({paths:e,renders:n,instance:o}){Object.entries(n).filter(([t,n])=>e.some(e=>r.shouldRender(e,n.path))&&r.dom.findWatcher(t)).forEach(([e,n])=>{const a=r.dom.findWatcher(e);if(!a)return;const i=n.render(),s=r.dom.recordState(a);return h.hasChanged(a,i)?h.canPatch(a)?(o.log(t.logLevel(),"ReBars: patching",n.path,a),h.compare({$target:a,html:i,instance:o}),void r.dom.restoreState(a,s)):(n.path.find(e=>e.endsWith(".length"))&&o.log(2,"ReBars: add a {{ ref someUniqueKey }} to each to avoid re-rendering the entire Array",n.path,a),a.style.display=""===i?"none":"",a.innerHTML=i,r.dom.restoreState(a,s),void o.log(t.logLevel(),"ReBars: render",n.path,a)):void 0})}},u={app({helpers:e={},template:n,data:o={},refs:i={},methods:d={},partials:l={},watch:c={},Handlebars:h=window.Handlebars,trace:u=!1}){const m=h.create(),f=m.compile(n),g={renders:{}};return t.setTrace(u),r.registerHelpers(m,e),{store:g,instance:m,render(e){const i=document.querySelector(e),h={$app:i,methods:d,data:o};s.register({instance:m,template:n,store:g,scope:h}),r.registerPartials(m,h,l),h.data=Object.entries(h.data).reduce((e,[t,n])=>("function"==typeof n&&e.hasOwnProperty(t)&&(e[t]=n.bind(h)),e),o),h.data=a.create(o,e=>{m.log(t.logLevel(),"ReBars: change",e),p.paths({paths:e,renders:g.renders,instance:m}),Object.entries(c).forEach(([t,n])=>{e.some(t=>r.shouldRender(t,e))&&n.call(h)})}),new MutationObserver(e=>{e.forEach(({addedNodes:e,removedNodes:n})=>{n.forEach(e=>{if(e.nodeType===Node.TEXT_NODE)return;const n=e.getAttribute(t.attrs.watch);n&&delete g.renders[n]})})}).observe(i,{childList:!0,attributes:!0,subtree:!0}),i.innerHTML=f(h.data)}}}},m={template:'\n  <div>\n    <div class="header-container">\n      <h1>\n        {{#watch}}\n          <span>{{ header.title }}</span>\n          <small>{{ header.description }}</small>\n        {{/watch}}\n      </h1>\n\n      <label>\n        Title:\n        <input\n          type="text"\n          value="{{ header.title }}"\n          {{ on input="updateTitle" }}\n        />\n      </label>\n\n      <label>\n        Description:\n        <input\n          type="text"\n          value="{{ header.description }}"\n          {{ on input="updateDescription" }}\n        />\n      </label>\n    </div>\n\n    <ul class="simple">\n      {{#watch "todos.*" }}\n        {{#each todos }}\n          <li {{ ref id }}>\n            <div class="todo">\n              <label>\n                <input\n                  type="checkbox"\n                  {{ on click="toggleDone" }}\n                  {{ isChecked }}\n                />\n                {{#if done }}\n                  <s>{{ name }}</s>\n                {{else}}\n                  <strong>{{ name }}</strong>\n                {{/if}}\n              </label>\n\n              <div class="actions">\n                <button {{ on click="deleteTodo" }}>\n                  delete\n                </button>\n              </div>\n            </div>\n          </li>\n        {{/each}}\n      {{/watch}}\n    </ul>\n\n    {{#watch}}\n      {{#if adding }}\n        <form>\n          <input type="text" {{ ref "newName" }} placeholder="the new todo" />\n          <button {{ on click="addItem" }}>Add todo</button>\n          <button {{ on click="toggleCreate" }}>Cancel</button>\n        </form>\n      {{else}}\n        <button {{ on click="toggleCreate" }}>Add another</button>\n      {{/if}}\n    {{/watch}}\n  </div>\n  ',trace:!0,data:{adding:!1,header:{title:"Todos",description:"some things that need done"},todos:[{done:!1,name:"Grocery Shopping",id:22},{done:!0,name:"Paint the House",id:44}]},helpers:{isChecked(){return this.done?"checked":""}},methods:{updateTitle({event:e}){this.header.title=e.target.value},updateDescription({event:e}){this.header.description=e.target.value},addItem({$refs:e,event:t}){t.preventDefault();const n=e().newName;this.todos.push({id:(new Date).getTime(),done:!1,name:n.value}),n.value=""},findTodo:({rootData:e},t)=>e.todos.find(e=>e.id===parseInt(t)),deleteTodo({rootData:e}){const t=e.todos.findIndex(e=>e.id===this.id);e.todos.splice(t,1)},toggleDone({event:e,methods:t}){t.findTodo(this.id).done=!this.done},toggleCreate({event:e}){e.preventDefault(),this.adding=!this.adding}}},f={template:'\n  <div>\n    {{#watch}}\n      {{#if isAdding }}\n        <form>\n          <input type="text" {{ ref "newName" }} placeholder="the new todo" >\n          <button {{ on click="addItem" }}>Add todo</button>\n          <button {{ on click="toggleAdd" }}>Cancel</button>\n        </form>\n      {{ else }}\n        <button {{ on click="toggleAdd" }}>Add another</button>\n      {{/if}}\n    {{/watch}}\n  </div>',data:{isAdding:!1},methods:{toggleAdd({event:e,methods:t}){e.preventDefault(),this.isAdding=!this.isAdding},addItem({event:e,methods:t,$refs:n}){e.preventDefault();const o=n().newName;this.todos.push({name:o.value,id:(new Date).getTime(),done:!1,updated:(new Date).toLocaleString()}),this.filters.filterBy=null,o.value="",o.focus()}}},g={template:'\n    <li {{ ref todo.id }}>\n      <div class="todo">\n        {{#if todo.isEditing }}\n          <input type="text" {{ ref "editInput" }} value="{{ todo.name }}" {{ on keydown="saveOnEnter" }}>\n          <button {{ on click="save" }}>done</button>\n        {{ else }}\n          <label>\n            <input type="checkbox" {{ isChecked }} {{ on click="toggleDone" }} />\n            {{#if todo.done }}\n              <s>{{ todo.name }}</s>\n            {{else}}\n              <strong>{{ todo.name }}</strong>\n            {{/if}}\n          </label>\n\n          <div class="actions">\n            <span class="date">{{ timeAgo }}</span>\n            <button {{ on click="remove" }}>delete</button>\n            <button {{ on click="edit" }}>edit</button>\n          </div>\n        {{/if}}\n      </div>\n    </li>\n  ',helpers:{isChecked(){return this.todo.done?"checked":""},timeAgo(){return this.updated}},methods:{remove({methods:e,rootData:t}){const n=t.todos.findIndex(e=>e.id===this.id);t.todos.splice(n,1)},saveOnEnter({event:e,methods:t}){"Enter"==e.code&&t.save()},save({event:e,$refs:t}){e.preventDefault(),this.todo.name=t().editInput.value,this.todo.isEditing=!1},edit(){this.todo.isEditing=!0},toggleDone({methods:e}){this.todo.done=!this.todo.done}}},v={template:'\n    <div class="filters">\n      <div>\n        {{#watch "filters.filterBy" }}\n          <button {{ disabledIf "completed" }} {{ on "completed" click="filterBy" }}>Show Only Completed</button>\n          <button {{ disabledIf "incomplete" }} {{ on "incomplete"  click="filterBy" }}>Show Only Incompleted</button>\n          <button {{ disabledIf null }} {{ on null click="filterBy"  }}>Show All</button>\n        {{/watch}}\n      </div>\n\n      <div>\n        <select {{ on change="sortBy" }}>\n          <option {{ selectedSort "name" }} value="name">Sort by Name</option>\n          <option {{ selectedSort "updated" }} value="updated">Sort by Updated at</option>\n          <option {{ selectedSort "completed" }} value="completed">Sort by Completed</option>\n        </select>\n\n        <select {{ on change="sortDir" }}>\n          <option {{ selectedDir "asc" }} value="asc">Ascending</option>\n          <option {{ selectedDir "desc" }} value="desc">Descending</option>\n        </select>\n      </div>\n    </div>\n  ',helpers:{selectedSort(e){return this.filters.sortBy===e?"selected":""},selectedDir(e){return this.filters.sortDir===e?"selected":""},disabledIf(e){return this.filters.filterBy===e?"disabled":""}},data:{filteredTodos(){const{filterBy:e,sortBy:t,sortDir:n}=this.data.filters,o=this.data.todos.filter(t=>"incomplete"===e?!t.done:"completed"!==e||t.done);return o.sort((e,n)=>"name"===t?e.name.localeCompare(n.name):"completed"===t?e.done-n.done:new Date(e.updated).getTime()-new Date(n.updated).getTime()),"desc"===n&&o.reverse(),o},filters:{filterBy:null,sortBy:"completed",sortDir:"asc"}},methods:{sortBy({methods:e,event:t}){this.filters.sortBy=t.target.value},sortDir({event:e,methods:t}){this.filters.sortDir=e.currentTarget.value},filterBy({methods:e},t){this.filters.filterBy=t}}};const{localStorage:b}=window,y=b.getItem("rebars-todo")||"{}",{todos:w,header:S}=JSON.parse(y);var T={template:'\n    <div class="header-container">\n      {{#watch tag="h1" }}\n        <span>{{ header.title }}</span>\n        <small>{{ header.description }}</small>\n      {{/watch}}\n\n      <label>\n        Title:\n        <input type="text" value="{{ header.title }}" {{ on input="updateTitle" }} />\n      </label>\n\n      <label>\n        Description:\n        <input type="text" value="{{ header.description }}" {{ on input="updateDescription" }} />\n      </label>\n    </div>\n\n    {{> Filters }}\n\n    {{#watch "filters.*" "todos.*" tag="ul"}}\n      {{#each filteredTodos as | todo | }}\n        {{> Todo todo=todo }}\n      {{/each}}\n    {{/watch}}\n\n    {{> Add }}\n  ',trace:!0,watch:{".*"(){b.setItem("rebars-todo",JSON.stringify(this.data))}},data:{header:S||{title:"ReBars Todos",description:"Some things that need done"},todos:w||[{done:!1,name:"Wash the car",updated:"3/1/2020, 12:37:10 PM",id:21},{done:!0,name:"Shopping for groceries",updated:"2/27/2020, 2:37:10 PM",id:22},{done:!1,name:"Code some Javascript",updated:"1/27/2020, 9:37:10 AM",id:23},{done:!0,name:"Go for a run",updated:"1/15/2020, 10:37:10 PM",id:24}]},partials:{Todo:g,Filters:v,Add:f},methods:{updateTitle({event:e,methods:t}){this.header.title=e.target.value},updateDescription({event:e,methods:t}){this.header.description=e.target.value}}},A={template:'\n    <h3>\n      Button have been clicked\n      {{#watch}}\n        {{ clicked }}\n      {{/watch}}\n\n      <button {{ on click="incriment" }}>\n        Click Me\n      </button>\n    </h3>\n  ',data:{clicked:0},trace:!0,methods:{incriment(){this.clicked++}}};window.Prism=window.Prism||{},window.Prism.manual=!0,u.app({$el:document.getElementById("demo-app-simple"),root:m}),u.app({$el:document.getElementById("demo-app-advanced"),root:T}),u.app({$el:document.getElementById("counter-demo"),root:A}),document.querySelectorAll(".language-html").forEach(e=>{e.innerText.includes("<script src")||(e.classList.remove("language-html"),e.classList.add("language-handlebars"))}),Prism.highlightAll(),Array.from(document.querySelectorAll("code.language-javascript .token.string")).filter(e=>e.innerText.trim().startsWith("<")&&e.innerText.trim().endsWith(">")).forEach(e=>{e.innerHTML=Prism.highlight(e.innerText,Prism.languages.handlebars,"handlebars")}),document.querySelectorAll("nav.tabs button").forEach(e=>{const t=e.parentElement.querySelectorAll("*"),n=e.parentElement.parentElement.querySelectorAll(".tab-content *");e.addEventListener("click",o=>{o.preventDefault(),t.forEach(e=>e.classList.remove("active")),n.forEach(e=>e.classList.remove("active")),e.classList.add("active"),document.getElementById(e.dataset.target).classList.add("active")})}),function(){const e=new IntersectionObserver(e=>{e.forEach(e=>{const t=e.target.getAttribute("id")||e.target.dataset.anchor,n=document.querySelector(`.side-bar-nav a[href="#${t}"]`);n&&(e.intersectionRatio>0?n.classList.add("active"):n.classList.remove("active"))})});document.querySelectorAll(" h1[id],h2[id],div[id],div[data-anchor]").forEach(t=>{e.observe(t)})}();
